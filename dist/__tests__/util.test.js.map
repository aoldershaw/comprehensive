{"version":3,"file":"util.test.js","sourceRoot":"","sources":["../../src/__tests__/util.test.ts"],"names":[],"mappings":";;AAAA,gCAAqD;AAErD,QAAQ,CAAC,OAAO,EAAE;IACd,EAAE,CAAC,kDAAkD,EAAE;QACnD,MAAM,CAAC,YAAK,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QAChD,MAAM,CAAC,YAAK,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IAChD,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,qEAAqE,EAAE;QACtE,MAAM,CAAC,YAAK,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;IACvD,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,YAAY,EAAE;IACnB,EAAE,CAAC,kCAAkC,EAAE;QACnC,MAAM,CAAC,iBAAU,CAAC,cAAM,OAAA,GAAG,EAAH,CAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzC,MAAM,CAAC,iBAAU,CAAC,iBAAU,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,8BAA8B,EAAE;QAC/B,MAAM,CAAC,iBAAU,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,uCAAuC,EAAE;QACxC,MAAM,CAAC,iBAAU,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,MAAM,CAAC,iBAAU,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,SAAS,EAAE;IAChB,EAAE,CAAC,+BAA+B,EAAE;QAChC,MAAM,CAAC,cAAO,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/B,MAAM,CAAC,cAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClE,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,8BAA8B,EAAE;QAC/B,MAAM,CAAC,cAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,oCAAoC,EAAE;QACrC,MAAM,CAAC,cAAO,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChC,MAAM,CAAC,cAAO,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA","sourcesContent":["import { ltrim, isFunction, isArray } from \"../util\";\n\ndescribe('ltrim', () => {\n    it('should trim the provided character from the left', () => {\n        expect(ltrim('{{{test}}}', '{')).toBe('test}}}')\n        expect(ltrim('test}}}', 't')).toBe('est}}}')\n    })\n    \n    it(`shouldn't affect strings without the provided character on the left`, () => {\n        expect(ltrim('{{{test}}}', 't')).toBe('{{{test}}}')\n    })\n})\n\ndescribe('isFunction', () => {\n    it('should return true for functions', () => {\n        expect(isFunction(() => 123)).toBe(true);\n        expect(isFunction(isFunction)).toBe(true);\n    })\n\n    it('should return false for null', () => {\n        expect(isFunction(null)).toBe(false);\n    })\n\n    it('should return false for non-functions', () => {\n        expect(isFunction({})).toBe(false);\n        expect(isFunction([])).toBe(false);\n    })\n})\n\ndescribe('isArray', () => {\n    it('should return true for arrays', () => {\n        expect(isArray([])).toBe(true);\n        expect(isArray([[1, 2, 3], [4, 5, 6], [7, 8, 9]])).toBe(true);\n    })\n\n    it('should return false for null', () => {\n        expect(isArray(null)).toBe(false);\n    })\n\n    it('should return false for non-arrays', () => {\n        expect(isArray({})).toBe(false);\n        expect(isArray(666)).toBe(false);\n    })\n})"]}