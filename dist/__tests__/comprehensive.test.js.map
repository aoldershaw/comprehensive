{"version":3,"file":"comprehensive.test.js","sourceRoot":"","sources":["../../src/__tests__/comprehensive.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { toObj, toObjSafe, } from \"../comprehensive\";\n\nconst people = [\n    {name: 'Aidan', age: 20},\n    {name: 'Becca', age: 21},\n    {name: 'Liam', age: 22},\n];\n\nconst ages = {\n    Aidan: 20,\n    Becca: 21,\n    Liam: 22\n}\n\ndescribe('toObj', () => {\n    it('should return an object', () => {\n        expect(toObj`{it: it over ${[1, 2, 3]}}`).toMatchObject({1: 1, 2: 2, 3: 3});\n    })\n\n    it('should allow for both the \"over\" and \"for ... of\" syntax', () => {\n        expect(toObj`{person.name: person.age for person of ${people}`).toMatchObject(ages);\n        expect(toObj`{it.name: it.age for it of ${people}`).toMatchObject(ages);\n        expect(toObj`{it.name: it.age over ${people}`).toMatchObject(ages);\n    });\n\n    it('should support static values', () => {\n        function withValue(v) {\n            return {\n                Aidan: v,\n                Becca: v,\n                Liam: v\n            }\n        }\n\n        expect(toObj`{person.name: ${true} for person of ${people}}`).toMatchObject(withValue(true));\n        expect(toObj`{person.name: ${[1, 2, 3]} for person of ${people}}`).toMatchObject(withValue([1, 2, 3]));\n        expect(toObj`{person.name: ${{a: 123, b: 456}} for person of ${people}}`).toMatchObject(withValue({a: 123, b: 456}));\n        expect(toObj`{${'test'}: ${123} over ${people}`).toMatchObject({test: 123})\n    })\n\n    it(`shouldn't be fooled by static values looking like the internal Reference type`, () => {\n        const reference = {expr: 'FAKE...'};\n        expect(toObj`{it.name: ${reference} over ${people}`).toMatchObject({\n            Aidan: reference,\n            Becca: reference,\n            Liam: reference\n        })\n    })\n\n    it(`should yield undefined for invalid reference type`, () => {\n        expect(toObj`{it.name: it.fake.key over ${people}`).toMatchObject({\n            Aidan: undefined,\n            Becca: undefined,\n            Liam: undefined\n        })\n    });\n\n    it('should support functions', () => {\n        expect(toObj`${p => `${p.name}-san`}: p.age for p of ${people}`).toMatchObject({\n            'Aidan-san': 20,\n            'Becca-san': 21,\n            'Liam-san': 22\n        });\n        expect(toObj`{it.name: ${p => p.age + 1} over ${people}}`).toMatchObject({\n            Aidan: 21,\n            Becca: 22,\n            Liam: 23\n        });\n    })\n\n    it('should ignore (most) whitespace', () => {\n        expect(toObj`{it.name: it over ${people}`).toMatchObject(toObj`     {\n            it.name          :          it\n            over\n            ${people}\n        }`)\n    });\n\n    it(`shouldn't require curly brackets`, () => {\n        expect(toObj`it.name : it over ${people}`).toMatchObject(toObj`{it.name : it over ${people}}`)\n    });\n\n    it(`shouldn't be strict about unclosed curly brackets`, () => {\n        const closed   = toObj`{it.name: it over ${people}}`;\n        const unclosed = toObj`{it.name: it over ${people}`;\n        expect(closed).toMatchObject(unclosed);\n    })\n\n    it(`should throw if not provided a string or number key`, () => {\n        expect(() => toObj`{it: it over ${people}}`).toThrow();\n        expect(() => toObj`{${{a: 123}}: it over ${people}`).toThrow();\n        expect(() => toObj`{it.name: it over ${people}`).not.toThrow();\n        expect(() => toObj`{it.age: it over ${people}`).not.toThrow();\n    })\n\n    it('should throw if missing any parts', () => {\n        expect(() => toObj``).toThrow();\n        expect(() => toObj`{ : it over ${people}`).toThrow();\n        expect(() => toObj`{it.name: over ${people}`).toThrow();\n        expect(() => toObj`{it.name: it ${people}`).toThrow();\n        expect(() => toObj`{it.name: it over}`).toThrow();\n        expect(() => toObj`{it.name it over ${people}}`).toThrow();\n        expect(() => toObj`{it.name:`).toThrow();\n    });\n})\n\ndescribe('toObjSafe', () => {\n    it('should not throw', () => {\n        expect(() => toObjSafe`{it: it over ${people}}`).not.toThrow();\n        expect(() => toObjSafe`{${{a: 123}}: it over ${people}`).not.toThrow();\n\n        expect(() => toObjSafe``).not.toThrow();\n        expect(() => toObjSafe`{ : it over ${people}`).not.toThrow();\n        expect(() => toObjSafe`{it.name: over ${people}`).not.toThrow();\n        expect(() => toObjSafe`{it.name: it ${people}`).not.toThrow();\n        expect(() => toObjSafe`{it.name: it over}`).not.toThrow();\n    })\n\n    it('should return null on invalid input', () => {\n        expect(toObjSafe``).toBeNull();\n    })\n\n    it('should not affect valid input', () => {\n        expect(toObjSafe`{it.name: it over ${people}}`).toMatchObject(toObj`{it.name: it over ${people}}`);\n    })\n})"]}