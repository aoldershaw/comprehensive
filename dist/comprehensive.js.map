{"version":3,"file":"comprehensive.js","sourceRoot":"","sources":["../src/comprehensive.ts"],"names":[],"mappings":"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","sourcesContent":["// Matches 'for name of' strings\nconst FOR_REGEX = /^for\\s+([A-Za-z_\\$][A-Za-z0-9-_\\$]*)\\s+of/;\n// Matches property chains (e.g. anObject.subObject.property)\nconst FIELD_REGEX = /^[A-Za-z_$][A-Za-z0-9-_$]*(?:\\.[A-Za-z_$][A-Za-z0-9-_$]*)*/\n\ninterface Context {\n    [name: string]: any;\n}\n\ninterface Reference {\n    expr: string;\n}\n\ntype Key = string | Reference;\ntype Value = string | number | boolean | Object | Array<any>;\ntype KeyFunction = (any) => string;\ntype ValueFunction = (any) => Value;\ntype KeyExpression = KeyFunction | Reference | string;\ntype ValueExpression = ValueFunction | Reference | Value\n\nfunction handleReference(ref: Reference, context: Context): any {\n    const parts = ref.expr.split('.');\n    let cur = context;\n    for(const part of parts) {\n        cur = cur[part];\n        if(cur === undefined) return cur;\n    }\n    return cur;\n}\n\nfunction ltrim(s: string, c: string) {\n    return s.replace(new RegExp(`^${c}+`), '');\n}\n\nfunction isFunction(o: any) {\n    return typeof o === 'function';\n}\n\nfunction evaluateKeyExpression(ke: KeyExpression, entry: any, context: Context, isReference: boolean): string {\n    if(isReference) return handleReference(<Reference> ke, context);\n    if(isFunction(ke)) return (<KeyFunction> ke)(entry);\n    return <string> ke;\n}\n\nfunction evaluateValueExpression(ve: ValueExpression, entry: any, context: Context, isReference: boolean): Value {\n    if(isReference) return handleReference(<Reference> ve, context);\n    if(isFunction(ve)) return (<ValueFunction> ve)(entry);\n    return <Value> ve;\n}\n\nfunction parseRef(s: string): Reference {\n    let match = FIELD_REGEX.exec(s);\n    if(match == null) throw new Error(\"Invalid reference format\");\n    return {expr: match[0]};\n}\n\nfunction parseFieldName(s: string): string {\n    let match;\n    if(s.substr(0, 4) === 'over') {\n        return 'it';\n    } else if((match = FOR_REGEX.exec(s)) != null) {\n        return match[1];\n    } else {\n        throw new Error(\"Invalid iteration operator. Expecting either 'for ... of' or 'over'\")\n    }\n}\n\nexport function toObj(strings: TemplateStringsArray, ...values: Array<any>) {\n    let s = ltrim(strings[0].trim(), '{').trim();\n    let valueIndex = 0;\n    let stringIndex = 1;\n    const hasKeyExpression = s.length === 0;\n    let key: Key;\n    if(hasKeyExpression) {\n        key = values[valueIndex++];\n        if(key == null) throw new Error(\"Expecting a key\");\n        s = strings[stringIndex++].trim();\n    } else {\n        key = parseRef(s);\n        s = s.substr(key.expr.length).trim();\n    }\n    if(s.charAt(0) !== ':') throw new Error(\"Missing ':'\");\n    s = s.substr(1).trim();\n    const hasValueExpression = s.length === 0;\n    let value: Value;\n    if(hasValueExpression) {\n        value = values[valueIndex++];\n        if(!value) throw new Error(\"Expecting a value\");\n        s = strings[stringIndex++].trim();\n    } else {\n        value = parseRef(s);\n        s = s.substr((<Reference> value).expr.length).trim();\n    }\n    const fieldName = parseFieldName(s);\n    const object = {};\n    const context: Context = {};\n    const list = values[valueIndex]\n    if(list == null || !Array.isArray(list)) throw new Error(`An invalid array was passed (provided ${list})`);\n    for(const entry of list) {\n        context[fieldName] = entry;\n        const curKey = evaluateKeyExpression(key, entry, context, !hasKeyExpression);\n        if(typeof curKey !== 'string' && typeof curKey !== 'number')\n            throw new Error('Key must be either a string or a number, not a(n) ' + typeof curKey);\n        object[curKey] = evaluateValueExpression(value, entry, context, !hasValueExpression);\n    }\n    return object;\n}\n\nexport function toObjSafe(strings: TemplateStringsArray, ...values: Array<any>) {\n    try {\n        return toObj(strings, ...values);\n    } catch(err) {\n        return null;\n    }\n}"]}